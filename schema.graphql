directive @cacheControl(
    maxAge: Int
    scope: CacheControlScope
) on OBJECT | FIELD | FIELD_DEFINITION

enum CacheControlScope {
    PUBLIC
    PRIVATE
}
directive @permission(
  requires: Permission = MANAGE_APPLICATION,
) on OBJECT | FIELD_DEFINITION

enum Permission {
  MANAGE_APPLICATION
  MANAGE_STUDENTS
  MANAGE_FACULTY
}

scalar Date
scalar DateTime
scalar JSON
type TestSetting@cacheControl(maxAge: 240){
    name: String!
    value: JSON!
}
type Student@cacheControl(maxAge: 240){
    id: ID!
    name: String!
    username: String!
    usn: String!
    groups: [Group!]
    attempts:[Attempt!]
    email: String
    dob: Date
    created_at: DateTime!
    updated_at: DateTime!
}

type Faculty@cacheControl(maxAge: 240){
    id: ID!
    name: String!
    username: String!
    designation: String!
    permissions: [String!]
    tests: [Test!]
    email: String
    groups: [Group!]
    created_at: DateTime!
    updated_at: DateTime!
}

type Course@cacheControl(maxAge: 240){
    id: ID!
    code: String!
    name: String!
    tests: [Test!]
    created_at: DateTime!
    updated_at: DateTime!
}

type Test@cacheControl(maxAge: 240){
    id: ID!
    course: Course!
    name: String!
    settings: [TestSetting!]
    faculties: [Faculty!]
    groups: [Group!]
    questions: [Question!]
    attempts: [Attempt!]
    created_at: DateTime!
    updated_at: DateTime!
}
type Group@cacheControl(maxAge: 240){
    id: ID!
    name: String!
    parent: Group
    children: [Group!]
    students: [Student!]
    faculties: [Faculty!]
    tests: [Test!]
}

type Question@cacheControl(maxAge: 240){
    id: ID!
    qno: Int!
    student_answers: [Answer!]
    schema: QuestionSchema!
    test: Test!
    created_at: DateTime!
    updated_at: DateTime!
}
enum QuestionSchema{
    SubjectiveQuestion
    ObjectiveQuestion
    CodingQuestion
}
type SubjectiveQuestion@cacheControl(maxAge: 300){
    description: String!
}
type ObjectiveQuestion@cacheControl(maxAge: 300){
    description: String!
    options: [String!]
}
type CodingQuestion@cacheControl(maxAge: 300){
    problem_statement: String!
    input_constraints: String!
    samples: String!
}
type Answer{
    id: ID!
    question: Question!
    attempt: Attempt!
    data: String!
    created_at: DateTime!
    updated_at: DateTime!
    marks: Float
}

type Attempt@cacheControl(maxAge: 240){
    id: ID!
    student: Student!
    test: Test!
    answers: [Answer!]
    marks: Float
    created_at: DateTime!
    updated_at: DateTime!
}

enum User{
    Student
    Faculty
}
type Query {
  me: User
  student(id:ID!): Student
  faculty(id:ID!): Faculty
  students(limit:Int page:Int name:String): [Student!]
  faculties(limit:Int page:Int name:String): [Faculty!]
  tests(limit:Int page:Int name:String): [Test!]
  groups(limit:Int page:Int name:String): [Group!]
  courses(limit:Int page:Int name:String): [Course!]
  question(id:ID!): Question
  test(id:ID!): Test
  answer(id:ID!): Answer
  attempt(id:ID!): Attempt
  course(id:ID!): Course
  group(id:ID!): Group
}
type Mutation {
    createFaculty(name: String! username: String! designation: String! email: String password: String! permissions: [String!] ): Faculty! @permission(requires:MANAGE_FACULTY)
    createStudent(name: String! username: String! usn: String! email: String password: String! dob:Date): Student! @permission(requires:MANAGE_STUDENTS)
    updateFaculty(id:ID! name: String username: String designation: String email: String password: String): Faculty!
    updateFacultyPermissions(id:ID!, permissions: [String!]) : Faculty! @permission(requires:MANAGE_FACULTY)
    updateStudent(id:ID! name: String username: String usn: String email: String password: String dob:Date): Student! @permission(requires:MANAGE_STUDENTS)
    createGroup(name: String! parentGroup:ID): Group!
    updateGroup(id:ID! name: String parentGroup:ID): Group!
    addFacultyToGroup(groupID:ID! facultyID: ID!): Group!
    removeFacultyFromGroup(groupID:ID! facultyID: ID!): Group!
    addStudentToGroup(groupID:ID! studentID: ID!): Group!
    removeStudentFromGroup(groupID:ID! studentID: ID!): Group!
    createTest(name: String! ): Test!
    updateTestName(id:ID! name: String!): Test!
    updateTestSetting(id:ID! settingName: String!, settingValue: JSON!): Test!
    addFacultyToTest(testID:ID! facultyID: ID!): Test!
    removeFacultyFromTest(testID:ID! facultyID: ID!): Test!
    addGroupToTest(testID:ID! groupID:ID!): Test!
    removeGroupFromTest(testID:ID! groupID:ID!): Test!
    deleteQuestion(testID:ID! questionID:ID!): Test!
    updateQuestion(questionID:ID! qno:Int schema:QuestionSchema ): Test!
    createQuestion(testID:ID! qno:Int! schema:QuestionSchema! ): Test!
    attemptTest(testID:ID!): Attempt!
    answerQuestion(attemptID:ID! questionID:ID! answer:String!): Test!
}
